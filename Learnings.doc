Project Overview:
The goal of this project was to build an automation system that sends weather updates every morning via SMS and email. It leverages OpenWeatherMap API for weather data, Twilio API for SMS notifications, and Python for backend functionality. The project also uses React to create a frontend that displays the weather data.

Technologies Used:
OpenWeatherMap API: To fetch weather data.
Twilio API: For sending SMS notifications.
Python: Backend for automating weather updates and sending notifications.
React: For displaying the weather data visually.
Git & GitHub: Version control and collaboration.
Dotenv: For managing environment variables securely.
Schedule: To automate the sending of messages at specific times.
Requests: To interact with external APIs.
Steps and Learnings:
1️⃣ Set Up OpenWeatherMap API:
Learning:
You signed up for OpenWeatherMap and generated an API key.
Explored how to use the API to retrieve weather data like temperature, humidity, and description.
Key Learning:
API calls can be made using simple GET requests, and data can be parsed from the JSON response.
2️⃣ Backend Development with Python:
Learning:

Learned how to create a backend system using Python to fetch weather data.
Used the requests library to send HTTP requests to the OpenWeatherMap API.
Learned how to extract necessary data (like temperature and weather description) from the API response.
Key Learning:

JSON parsing is crucial for working with data returned from APIs.
Understanding how to manage environment variables (via .env files) keeps sensitive data like API keys secure.
3️⃣ Using Twilio API for SMS Notifications:
Learning:

Set up Twilio API to send SMS notifications using Python.
Learned how to use Twilio's Python SDK to send a message to a specified phone number.
Incorporated SMS notifications into the Python backend, making the weather data available to you via text.
Key Learning:

Twilio provides a simple and effective way to send SMS messages programmatically.
It's crucial to keep API credentials (like SID and Token) secure, typically stored in .env files.
4️⃣ Scheduling SMS with Python:
Learning:

Used the schedule library in Python to automate the process of sending an SMS at a specific time (7:00 AM every day).
Developed a continuous running script that checks every minute for scheduled tasks and sends the weather update as scheduled.
Key Learning:

Scheduling tasks in Python allows you to automate repetitive actions, like sending messages at specific intervals.
5️⃣ Setting Up GitHub for Version Control:
Learning:

Created a new GitHub repository to store the project code and collaborate.
Set up Git locally on your machine to manage version control for the project.
Learned how to properly use .gitignore to prevent sensitive files (like .env) from being pushed to GitHub.
Key Learning:

Version control helps track project progress, allows for better collaboration, and safeguards against accidental data loss.
6️⃣ Automating Weather Email Notification:
Learning:

You explored the integration of email notifications to alert about the weather forecast in addition to the SMS.
Although this was skipped in your final version, you gained insights into how to integrate email services using libraries like smtplib.
Key Learning:

Email notifications can be integrated into Python scripts to communicate with users, especially for automated tasks.
7️⃣ Building React Frontend (Optional Future Plan):
Learning:
React can be used to create dynamic UIs that display weather data fetched from the backend.
The React app could fetch weather data and display it to the user, offering a more interactive experience than just SMS or email.
Key Learning:
React is a powerful tool for building modern, user-friendly UIs that work seamlessly with backend data.
8️⃣ Deployment & Scheduling in the Cloud (Optional Next Step):
Learning:

You learned that deploying this project to a cloud service (like AWS Lambda or Heroku) would enable it to run without the need for a dedicated server.
Cloud functions can be set up to execute tasks (like sending SMS) on a schedule.
Key Learning:

Cloud deployments offer scalability and reliability, and integrating with scheduling services allows for automation in a cloud environment.
Final Outcome:
Weather updates are sent to you every morning via SMS at 7:00 AM.
The project is built using Python for the backend logic and APIs, and React for frontend visualization (optional, future step).
All credentials and sensitive data are managed securely via environment variables.
You learned how to work with external APIs (OpenWeatherMap) and communication APIs (Twilio), and automate tasks with Python.
Things You Learned:
API integration: Making requests to APIs and processing the data.
Twilio: Sending SMS notifications via an external API.
Python scheduling: Automating tasks at specific intervals using schedule.
GitHub: Using version control effectively and ensuring sensitive data is not pushed to public repositories.
Frontend basics (optional): Using React for dynamic user interfaces.
Environment variables: Managing secrets securely without hardcoding them into your application.
